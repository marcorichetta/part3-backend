{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","services/contacts.js","components/Notification.js","App.js","index.js"],"names":["Filter","_ref","filterHandler","react_default","a","createElement","Fragment","onChange","PersonForm","newName","newNumber","NameSubmit","NameChange","NumberChange","onSubmit","value","type","Persons","personsList","handleDelete","map","person","key","name","number","onClick","id","baseUrl","contacts","axios","get","then","response","data","newObject","post","put","concat","window","confirm","delete","Notification","message","notificationStyle","background","fontSize","borderStyle","borderRadius","padding","marginBottom","color","style","App","_useState","useState","_useState2","Object","slicedToArray","persons","setPersons","_useState3","_useState4","showAll","setShowAll","_useState5","_useState6","setNewName","_useState7","_useState8","setNewNumber","_useState9","_useState10","searchName","setSearchName","_useState11","_useState12","notificationMessage","setNotificationMessage","_useState13","_useState14","error","setError","useEffect","contactService","initialNumbers","personsToShow","filter","toLowerCase","includes","components_Notification","components_Filter","event","target","components_PersonForm","preventDefault","nameObject","content","length","personToChange","find","changedPerson","objectSpread","returnedName","catch","setTimeout","returnedContact","components_Persons","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.46e4888e.chunk.js","sourcesContent":["/* FULLSTACK OPEN - Phonebook */\n\nimport React from 'react';\n\n/**\n * Recibe una función `handleSearchName()` que será ejecutada\n * cada vez que el valor del input cambie.\n */\n\nconst Filter = ({ filterHandler }) => {\n    return (\n        <>\n            Filter:\n            <input onChange={filterHandler} />\n        </>\n    )\n}\n\nexport default Filter;","/* FULLSTACK OPEN - Phonebook */\n\nimport React from 'react';\n\n/**\n * Recibe los valores newName y newNumber.\n * También recibe las funciones para el cambio de nombre, número y\n * para cuando se hace submit del form.\n */\n\nconst PersonForm = ({ newName, newNumber, NameSubmit, NameChange, NumberChange }) => {\n    return (\n        <>\n            <form onSubmit={NameSubmit}>\n                <div>\n                    Name:\n                <input \n                    value={newName}\n                    onChange={NameChange}\n                />\n                </div>\n                <div>\n                    Number:\n                <input \n                    value={newNumber}\n                    onChange={NumberChange}\n                />\n                </div>\n                <div>\n                    <button type=\"submit\">Add</button>\n                </div>\n            </form>\n        </>\n    )\n}\n\nexport default PersonForm;","/* FULLSTACK OPEN - Phonebook */\n\nimport React from 'react';\n\n/**\n * Recibe un objeto con personas\n * y devuelve una lista de items por cada persona\n * También recible una función para eliminar contactos.\n */\nconst Persons = ({ personsList, handleDelete }) => {\n\n    return (\n        <ul>\n            {personsList.map(person =>\n                <li key={person.name}>\n                    {person.name} {person.number}\n\n                    {/* onClick envía el id y name de la persona \n                    a la función removeName() definida en App */}\n                    <button \n                        onClick={() => handleDelete(person.id, person.name)}>\n                        Delete\n                    </button>\n                </li>\n            )}\n        </ul>\n    )\n}\n\nexport default Persons;","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deleteContact = (id, name) => {\n  const result = window.confirm(`Delete ${name}?`)\n\n  if (result) {\n      axios.delete(`${baseUrl}/${id}`)    \n    }\n}\n\nexport default { \n  getAll, \n  create, \n  update,\n  deleteContact \n}","/* FULLSTACK OPEN - Phonebook */\n\nimport React from 'react'\n\nconst Notification = ({ message, type}) => {\n\n    const notificationStyle = {\n        background: 'lightgrey',\n        fontSize: 20,\n        borderStyle: 'solid',\n        borderRadius: 5,\n        padding: 10,\n        marginBottom: 10,\n    }\n\n    if (type === 'error') {\n        notificationStyle.color = 'red';\n    } else {\n        notificationStyle.color = 'green'\n    }\n\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div style={notificationStyle}>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","/* FULLSTACK OPEN - Phonebook */\n\nimport React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport contactService from './services/contacts'\nimport Notification from './components/Notification';\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [showAll, setShowAll] = useState(true)\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [searchName, setSearchName] = useState('')\n  const [notificationMessage, setNotificationMessage] = useState(null)\n  const [error, setError] = useState(null)\n\n  /**\n   * GET para obtener las personas de `db.json`\n   * Están servidas con *json-server*\n   */\n  useEffect(() => {\n    contactService\n      .getAll()\n      .then(initialNumbers => {\n        setPersons(initialNumbers)\n      })\n  }, [])\n\n  /**\n   * Si `showAll` === `true`, `personsToShow` contendrá todas las personas.\n   * Si no, contendrá solo las que pasen el filtro. \n   */\n  const personsToShow = showAll\n    ? persons\n    : persons.filter(person => {\n      // Comparamos todo en lowerCase \"case-insensitive\"\n      return person.name.toLowerCase().includes(searchName.toLowerCase());\n    })\n\n  /* EVENT HANDLERS */\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  /**\n   * Cuando se cambie el valor del filtro,\n   * `showAll` se cambiará a _false_,\n   * haciendo que `personsToShow` sea reevaluado.\n   */\n  const handleSearchName = (event) => {\n    setSearchName(event.target.value)\n    setShowAll(false)\n  }\n\n  /**\n   * Recibe el id y nombre de la persona\n   * a eliminar de la lista.\n   */\n  const removeName = (id, name) => {\n    contactService.deleteContact(id, name)\n    \n    // Actualiza las personas a renderizar\n    // excluyendo a la que coincide con el\n    // id recientemente eliminado.\n    setPersons(persons.filter(person => person.id !== id))\n\n    setNotificationMessage(\n      `${name} has been removed from server.`\n    )\n    \n    setTimeout(() => {\n      setNotificationMessage(null)\n      setError('')\n    }, 5000)    \n  }\n\n  /**\n   * Agrega un nombre que no esté \n   * duplicado a la lista `persons`\n   */\n  const addName = (event) => {\n\n    event.preventDefault();\n    const nameObject = {\n      content: {\n        name: newName,\n        number: newNumber,\n        id: persons.length + 1,\n      }\n    }\n\n    // Check for duplicates\n    const isDuplicate = persons.filter(person => person.name === newName)\n\n    if (isDuplicate.length !== 0) {\n      const result = window.confirm(\n        `${newName} is already added to phonebook, replace the old number with a new one?`)\n\n        // Aceptar\n        if (result) {  \n\n          // Encontrar la persona a modificar\n          const personToChange = persons.find(person => person.name === newName)\n\n          // Create a new object (copy of the duplicate)\n          // and modify its number\n          const changedPerson = {...personToChange, number: newNumber}\n\n          // Update the person's number on the db\n          // Then update persons with the new modification\n          // (This logic could be extracted)\n          contactService\n            .update(changedPerson.id, changedPerson)\n            .then(returnedName => {\n              setPersons(persons.map(person => \n                person.id !== changedPerson.id\n                ? person\n                : returnedName\n              ))\n            })\n            .catch(error => {\n              setError('error')\n              setNotificationMessage(\n                `Information of ${changedPerson.name} has already been removed from server.`\n                )\n              \n              setTimeout(() => {\n                setNotificationMessage(null)\n                setError('')\n              }, 5000)\n            })\n          \n          setNotificationMessage(`${changedPerson.name} number was updated`)\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 5000)\n\n          return true\n        } else {\n          return false // User canceled modification\n        }\n    }\n\n    // Create a new object and add it to the db\n    contactService\n      .create(nameObject)\n      .then(returnedContact => {\n        setPersons(persons.concat(returnedContact))\n        setNewName('')\n        setNewNumber('')\n      })\n    \n      setNotificationMessage(`${newName} was added to the phonebook`)\n\n      setTimeout(() => {\n        setNotificationMessage(null)\n      }, 5000)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification type={error} message={notificationMessage} />\n\n      <Filter filterHandler={handleSearchName} />\n\n      <h2>New contact</h2>\n      <PersonForm\n        newName={newName}\n        newNumber={newNumber}\n        NameSubmit={addName}\n        NameChange={handleNameChange}\n        NumberChange={handleNumberChange}\n      />\n\n      <h2>Contacts</h2>\n      <Persons personsList={personsToShow} handleDelete={removeName} />\n\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}